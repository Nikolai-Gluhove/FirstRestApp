@startuml
title Архитектура приложения **FirstRestApp** (Spring Boot + собственные классы)

skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
}

' === UI Layer ===
package UI {
  class DispatcherServlet #LightGreen {
    +doDispatch()
    "Фронт-контроллер Spring MVC, направляет запросы в контроллеры"
  }
}

' === Controllers Layer ===
package Controllers {
  class FirstRestController #LightBlue {
    + sayHello() : String
    "Простейший REST контроллер: GET /api/sayHello"
  }

  class PeopleController #LightBlue {
    - PeopleService peopleService
    - ModelMapper modelMapper
    + getPeople() : List<PersonDTO>
    + getPerson(id:int) : PersonDTO
    + create(personDTO:PersonDTO, bindingResult:BindingResult) : ResponseEntity<HttpStatus>
    + handleException(e:PersonNotFoundException) : ResponseEntity<PersonErrorResponse>
    + handleException(e:PersonNotCreatedException) : ResponseEntity<PersonErrorResponse>
    "REST-контроллер для работы с Person"
  }
}

' === DTO Layer ===
package DTO {
  class PersonDTO #LightBlue {
    - name:String
    - age:int
    - email:String
    + getters/setters
    "Data Transfer Object для Person"
  }
}

' === Services Layer ===
package Services {
  class PeopleService #LightBlue {
    - PeopleRepository peopleRepository
    + findAll() : List<Person>
    + findOne(id:int) : Person
    + save(person:Person) : void
    "Сервисный слой, инкапсулирует бизнес-логику"
  }
}

' === Repositories Layer ===
package Repositories {
  interface PeopleRepository #LightBlue {
    "Spring Data репозиторий для Person"
  }
}

' === Database Layer ===
package Database {
  class Person #LightBlue {
    - id:int
    - name:String
    - age:int
    - email:String
    + getters/setters
    "JPA-сущность Person"
  }
}

' === Util Layer ===
package Util {
  class PersonErrorResponse #LightBlue {
    - message:String
    - timestamp:long
    + getters/setters
    "Ответ с ошибкой для REST"
  }

  class PersonNotFoundException #LightBlue {
    "Ошибка: Person не найден"
  }

  class PersonNotCreatedException #LightBlue {
    "Ошибка: Person не создан (валидация)"
  }
}

' === Configuration Layer ===
package Configuration {
  class FirstRestAppApplication #LightBlue {
    + main(args:String[])
    + modelMapper(): ModelMapper
    "Главный класс приложения Spring Boot"
  }
}

' === Spring Infrastructure Layer ===
package SpringInfrastructure {
  interface JpaRepository #LightGreen {
    + findAll()
    + findById(ID)
    + save(Entity)
    "Базовый интерфейс Spring Data JPA"
  }

  class ApplicationContext #LightGreen {
    "Контейнер Spring, управляет бинами"
  }

  class BindingResult #LightGreen {
    "Результат валидации, содержит FieldErrors"
  }

  class FieldError #LightGreen {
    "Информация об ошибке валидации"
  }

  class ResponseEntity #LightGreen {
    "HTTP-ответ с телом и статусом"
  }

  class HttpStatus #LightGreen {
    "HTTP статус код (200, 404, 400)"
  }

  class SecurityFilterChain #LightGreen {
    "Конфигурация фильтров Spring Security"
  }
}

' === External APIs Layer ===
package ExternalAPIs {
  class Jackson #LightGreen {
    "Библиотека сериализации JSON"
  }

  class ModelMapper #LightGreen {
    "Библиотека для преобразования DTO <-> Entity"
  }
}

' === Relations ===
DispatcherServlet o-- FirstRestController
DispatcherServlet o-- PeopleController

PeopleController o-- PeopleService
PeopleController ..> PersonDTO
PeopleController ..> ResponseEntity
PeopleController ..> HttpStatus
PeopleController ..> BindingResult
BindingResult o-- FieldError
PeopleController ..> PersonNotFoundException
PeopleController ..> PersonNotCreatedException
PeopleController ..> PersonErrorResponse
PeopleController ..> Jackson : "calls"
PeopleController ..> ModelMapper : "maps DTO->Entity"

PeopleService o-- PeopleRepository
PeopleService ..> Person
PeopleService ..> PersonNotFoundException

PeopleRepository ..|> JpaRepository
PeopleRepository *-- Person

ApplicationContext o-- PeopleController
ApplicationContext o-- PeopleService
ApplicationContext o-- PeopleRepository
ApplicationContext o-- ModelMapper

FirstRestAppApplication o-- ApplicationContext
FirstRestAppApplication o-- ModelMapper

' === Notes ===
note right of DispatcherServlet
  Основной вход в Spring MVC.
  Получает HTTP-запрос и
  вызывает соответствующий контроллер.
end note

note top of ApplicationContext
  ApplicationContext управляет
  жизненным циклом бинов,
  внедряет зависимости.
end note

note right of JpaRepository
  Spring автоматически генерирует
  реализацию методов доступа к БД.
end note

note right of SecurityFilterChain
  При добавлении Spring Security
  управляет аутентификацией и авторизацией.
end note

note right of ModelMapper
  Упрощает конвертацию DTO в Entity и обратно.
end note

' === Legend ===
legend left
  <#LightBlue>|Мои классы (FirstRestApp)|
  <#LightGreen>|Spring/внешние классы |

  --|>   Наследование
  ..|>   Реализация интерфейса
  o--    Агрегация (has a)
  *--    Композиция (сильная связь)
  ..>    Зависимость (слабая связь)
  ..> "calls"   Вызов внешнего API
endlegend

@enduml
